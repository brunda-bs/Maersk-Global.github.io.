apiVersion: v1
kind: ConfigMap
metadata:
  name: trace-collector-config
data:
  trace-collector.yaml: |-
    receivers:
        otlp:
          protocols:
           grpc:
           http:
        zipkin:
          endpoint: 0.0.0.0:9411
    processors:
        batch: null
        batch/2:
            timeout: 10s
            send_batch_size: 1000
            send_batch_max_size: 2000
        k8sattributes:
        memory_limiter:
          # 80% of maximum memory up to 2G
          limit_mib: 1500
          # 25% of limit up to 2G
          spike_limit_mib: 512
          check_interval: 5s
        attributes/traces_zone:
          actions:
            - key: env
              action: insert
              value: ${ENVIRONMENT_NAME}
            - key: app
              action: insert
              value: servicemesh
            - key: product_id
              action: insert
              value: servicemesh
            - key: region
              action: insert
              value: ${REGION_NAME}
            - key: provider
              action: insert
              value: ${CLOUD_NAME}
            - key: zone
              action: insert
              value: ${CLUSTER_NAME}

    exporters:
        otlphttp/auth:
            endpoint: https://metrics.pensieve.maersk-digital.net
            auth:
              authenticator: oauth2client
        datadog:
            hostname: kuma-trace-${CLUSTER_NAME}
            api:
                key: "${DD_API_KEY}"
                site: datadoghq.eu
            tags:
                - app:servicemesh
                - env:${ENVIRONMENT_NAME}
                - zone:${CLUSTER_NAME}
                - provider:${CLOUD_NAME}
                - region:${REGION_NAME}
                - service:kuma
                - business_platform:servicemesh
                - brand:maersk
                - team:purplesea
    # Enabling the debug Refer :- https://opentelemetry.io/docs/collector/configuration/
        # logging:
        #   loglevel: debug

    extensions:
        # Health Check extension enables an HTTP url that can be probed to check the status of the OpenTelemetry Collector. This extension can be used as a liveness and/or readiness probe on Kubernetes.
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/extension/healthcheckextension/README.md
        health_check: null
        health_check/1:
            endpoint: 0.0.0.0:13133
        # Performance Profiler extension enables the golang net/http/pprof endpoint. This is typically used by developers to collect performance profiles and investigate issues with the service
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/extension/pprofextension/README.md
        pprof: null
        pprof/1:
            endpoint: 0.0.0.0:1777
            block_profile_fraction: 3
            mutex_profile_fraction: 5
        memory_ballast:
            size_mib: 512
        zpages: {}
        oauth2client:
            client_id: "${CLIENT_ID}"
            client_secret: "${CLIENT_SECRET}"
            token_url: "https://login.microsoftonline.com/05d75c05-fa1a-42e7-9cf1-eb416c396f2d/oauth2/v2.0/token"
            scopes: ["api://ingestion.pensieve/.default"]

    service:
        extensions:
            - health_check/1
            - pprof/1
            - zpages
            - oauth2client
        pipelines:
            traces:
                receivers:
                    - otlp
                    - zipkin
                processors:
                    - memory_limiter
                    - batch/2
                    - k8sattributes
                    - attributes/traces_zone
                exporters:
                    - datadog
                    - otlphttp/auth
